{
  "array": [
    {
      "text": "type Graph = { [key: string]: { [key: string]: number } };\n\nfunction dijkstra(graph: Graph, start: string, end: string): number {\n  const distances: { [key: string]: number } = {};\n  const queue = new PriorityQueue<string>();\n  const visited = new Set<string>();\n\n  distances[start] = 0;\n  queue.enqueue(start, 0);\n\n  while (!queue.isEmpty()) {\n    const current = queue.dequeue().element;\n\n\tif (current === end) {\n  \treturn distances[end];\n\t}\n\n\tif (visited.has(current)) {\n  \tcontinue;\n\t}\n\n\tvisited.add(current);\n\n\tfor (const neighbor in graph[current]) {\n  \tconst distance = graph[current][neighbor];\n  \tconst totalDistance = distances[current] + distance;\n\n  \tif (!distances[neighbor] || totalDistance < distances[neighbor]) {\n\t\tdistances[neighbor] = totalDistance;\n\t\tqueue.enqueue(neighbor, totalDistance);\n  \t}\n\t}\n  }\n\n  return -1;\n}",
      "difficulty": 9
    },
    {
      "text": "async function getUser(id: number): Promise<User> {\n  const response = await fetch(`/users/${id}`);\n  const user = await response.json();\n\n  return user;\n}\n\nasync function updateUser(user: User): Promise<void> {\n  const response = await fetch(`/users/${user.id}`, {\n\tmethod: 'PUT',\n\tbody: JSON.stringify(user),\n\theaders: {\n  \t'Content-Type': 'application/json'\n\t}\n  });\n\n  if (!response.ok) {\n\tthrow new Error('Failed to update user.');\n  }\n}\n\nasync function deleteUser(id: number): Promise<void> {\n  const response = await fetch(`/users/${id}`, {\n\tmethod: 'DELETE'\n  });\n\n  if (!response.ok) {\n\tthrow new Error('Failed to delete user.');\n  }\n}",
      "difficulty": 7
    },
    {
      "text": "import * as React from \"react\";\n\nimport styles from \"./button.module.scss\";\n\nexport function IconButton(props: {\n  onClick?: () => void;\n  icon?: JSX.Element;\n  type?: \"primary\" | \"danger\";\n  text?: string;\n  bordered?: boolean;\n  shadow?: boolean;\n  className?: string;\n  title?: string;\n  disabled?: boolean;\n}) {\n  return (\n\t<button\n  \tclassName={\n\t\tstyles[\"icon-button\"] +\n\t\t` ${props.bordered && styles.border} ${props.shadow && styles.shadow} ${\n  \t\tprops.className ?? \"\"\n\t\t} clickable ${styles[props.type ?? \"\"]}`\n  \t}\n  \tonClick={props.onClick}\n  \ttitle={props.title}\n  \tdisabled={props.disabled}\n  \trole=\"button\"\n\t>\n  \t{props.icon && (\n\t\t<div\n  \t\tclassName={\n\t\t\tstyles[\"icon-button-icon\"] +\n\t\t\t` ${props.type === \"primary\" && \"no-dark\"}`\n  \t\t}\n\t\t>\n  \t\t{props.icon}\n\t\t</div>\n  \t)}\n\n  \t{props.text && (\n\t\t<div className={styles[\"icon-button-text\"]}>{props.text}</div>\n  \t)}\n\t</button>\n  );\n}",
      "difficulty": 5
    },
    {
      "text": "export function AvatarPicker(props: {\n  onEmojiClick: (emojiId: string) => void;\n}) {\n  return (\n\t<EmojiPicker\n  \tlazyLoadEmojis\n  \ttheme={EmojiTheme.AUTO}\n  \tgetEmojiUrl={getEmojiUrl}\n  \tonEmojiClick={(e) => {\n\t\tprops.onEmojiClick(e.unified);\n  \t}}\n\t/>\n  );\n}\n\nexport function Avatar(props: { model?: ModelType; avatar?: string }) {\n  if (props.model) {\n\treturn (\n  \t<div className=\"no-dark\">\n\t\t{props.model?.startsWith(\"gpt-4\") ? (\n  \t\t<BlackBotIcon className=\"user-avatar\" />\n\t\t) : (\n  \t\t<BotIcon className=\"user-avatar\" />\n\t\t)}\n  \t</div>\n\t);\n  }\n\n  return (\n\t<div className=\"user-avatar\">\n  \t{props.avatar && <EmojiAvatar avatar={props.avatar} />}\n\t</div>\n  );\n}\n\nexport function EmojiAvatar(props: { avatar: string; size?: number }) {\n  return (\n\t<Emoji\n  \tunified={props.avatar}\n  \tsize={props.size ?? 18}\n  \tgetEmojiUrl={getEmojiUrl}\n\t/>\n  );\n}",
      "difficulty": 4
    },
    {
      "text": "function App() {\n  return (\n\t<Box textAlign=\"center\" fontSize=\"xl\">\n  \t<Grid minH=\"100vh\" p={3}>\n\t\t<ColorModeSwitcher justifySelf=\"flex-end\" />\n\t\t<VStack spacing={8}>\n  \t\t<Logo h=\"40vmin\" pointerEvents=\"none\" />\n  \t\t<Text>\n\t\t\tEdit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\n  \t\t</Text>\n  \t\t<Link\n\t\t\tcolor=\"teal.500\"\n\t\t\thref=\"https://chakra-ui.com\"\n\t\t\tfontSize=\"2xl\"\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noopener noreferrer\"\n  \t\t>\n\t\t\tLearn Chakra\n  \t\t</Link>\n\t\t</VStack>\n  \t</Grid>\n\t</Box>\n  )\n}\n\nexport default App",
      "difficulty": 3
    },
    {
      "text": "const Mailto = ({ email, subject = '', body = '', children }) => {\n  let params = subject || body ? '?' : '';\n  if (subject) params += `subject=${encodeURIComponent(subject)}`;\n  if (body) params += `${subject ? '&' : ''}body=${encodeURIComponent(body)}`;\n\n  return <a href={`mailto:${email}${params}`}>{children}</a>;\n};",
      "difficulty": 1
    },
    {
      "text": ".carousel {\n  position: relative;\n}\n\n.carousel-item {\n  position: absolute;\n  visibility: hidden;\n}\n\n.carousel-item.visible {\n  visibility: visible;\n}\n\nconst Carousel = ({ carouselItems, ...rest }) => {\n  const [active, setActive] = React.useState(0);\n  let scrollInterval = null;\n\n  React.useEffect(() => {\n\tscrollInterval = setTimeout(() => {\n  \tsetActive((active + 1) % carouselItems.length);\n\t}, 2000);\n\treturn () => clearTimeout(scrollInterval);\n  });\n\n  return (\n\t<div className=\"carousel\">\n  \t{carouselItems.map((item, index) => {\n\t\tconst activeClass = active === index ? ' visible' : '';\n\t\treturn React.cloneElement(item, {\n  \t\t...rest,\n  \t\tclassName: `carousel-item${activeClass}`\n\t\t});\n  \t})}\n\t</div>\n  );\n};",
      "difficulty": 6
    },
    {
      "text": "function copyToClipboard() {\n\n  const copyText = document.getElementById(\"myInput\");\n  copyText.select();\n  document.execCommand(\"copy\");\n  \n}\nfunction copyToClipboard(){\n navigator.clipboard.writeText(document.querySelector('#myInput').value)\n}",
      "difficulty": 1
    },
    {
      "text": "export default function EditPost() {\n  function handleSubmit(e) {\n\te.preventDefault();\n\tconst form = e.target;\n\tconst formData = new FormData(form);\n\tfetch('/some-api', { method: form.method, body: formData });\n\tconsole.log(new URLSearchParams(formData).toString());\n\tconst formJson = Object.fromEntries(formData.entries());\n\tconsole.log(formJson);\n\tconsole.log([...formData.entries()]);\n  }\n\n  return (\n\t<form method=\"post\" onSubmit={handleSubmit}>\n  \t<label>\n\t\tPick your favorite fruit:\n\t\t<select name=\"selectedFruit\" defaultValue=\"orange\">\n  \t\t<option value=\"apple\">Apple</option>\n  \t\t<option value=\"banana\">Banana</option>\n  \t\t<option value=\"orange\">Orange</option>\n\t\t</select>\n  \t</label>\n  \t<label>\n\t\tPick all your favorite vegetables:\n\t\t<select\n  \t\tname=\"selectedVegetables\"\n  \t\tmultiple={true}\n  \t\tdefaultValue={['corn', 'tomato']}\n\t\t>\n  \t\t<option value=\"cucumber\">Cucumber</option>\n  \t\t<option value=\"corn\">Corn</option>\n  \t\t<option value=\"tomato\">Tomato</option>\n\t\t</select>\n  \t</label>\n  \t<hr />\n  \t<button type=\"reset\">Reset</button>\n  \t<button type=\"submit\">Submit</button>\n\t</form>\n  );\n}",
      "difficulty": 8
    },
    {
      "text": "const API_URL = \"http://localhost:8080/api/auth/\";\n\nclass AuthService {\n  login(username: string, password: string) {\n\treturn axios\n  \t.post(API_URL + \"signin\", {\n\t\tusername,\n\t\tpassword\n  \t})\n  \t.then(response => {\n\t\tif (response.data.accessToken) {\n  \t\tlocalStorage.setItem(\"user\", JSON.stringify(response.data));\n\t\t}\n\n\t\treturn response.data;\n  \t});\n  }\n\n  logout() {\n\tlocalStorage.removeItem(\"user\");\n  }\n\n  register(username: string, email: string, password: string) {\n\treturn axios.post(API_URL + \"signup\", {\n  \tusername,\n  \temail,\n  \tpassword\n\t});\n  }\n\n  getCurrentUser() {\n\tconst userStr = localStorage.getItem(\"user\");\n\tif (userStr) return JSON.parse(userStr);\n\n\treturn null;\n  }\n}\n\nexport default new AuthService();",
      "difficulty": 5
    }
  ]
}