{
  "array": [
  {
    "text": "import java.util.Arrays;\n\npublic class BubbleSort {\n\n\tstatic void sort(int [] arrA){\n\t\tif(arrA==null || arrA.length==0)\n\t\t\treturn;\n\n\t\tSystem.out.println(\"Original Array: \" + Arrays.toString(arrA));\n\t\tint size = arrA.length;\n\t\tfor (int i = 0; i <size-1 ; i++) {\n\t\t\tfor (int j = 0; j <size-i-1 ; j++) {\n\t\t\t\t//check the adjacent elements\n\t\t\t\tif(arrA[j]>arrA[j+1]){\n\t\t\t\t\t//swap the elements\n\t\t\t\t\tint temp = arrA[j];\n\t\t\t\t\tarrA[j] = arrA[j+1];\n\t\t\t\t\tarrA[j+1] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Sorted Array: \" +  Arrays.toString(arrA));\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint [] arrA = {5, 1, 9, 3, 2, 10};\n\t\tsort(arrA);\n\t}\n}",
    "difficulty": 5.0
  },
  {
    "text": "import com.lowagie.text.Document;\nimport com.lowagie.text.Paragraph;\nimport com.lowagie.text.pdf.PdfWriter;\n\npublic class GeneratePDF {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tOutputStream file = new FileOutputStream(new File(\"C:\\\\Test.pdf\"));\n\n\t\t\tDocument document = new Document();\n\t\t\tPdfWriter.getInstance(document, file);\n\t\t\tdocument.open();\n\t\t\tdocument.add(new Paragraph(\"Hello Kiran\"));\n\t\t\tdocument.add(new Paragraph(new Date().toString()));\n\n\t\t\tdocument.close();\n\t\t\tfile.close();\n\n\t\t} catch (Exception e) {\n\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}",
    "difficulty": 2.0
  },
  {
    "text": "public void postMail( String recipients[ ], String subject, String message , String from) throws MessagingException\n{\n\tboolean debug = false;\n\n\t//Set the host smtp address\n\tProperties props = new Properties();\n\tprops.put(\"mail.smtp.host\", \"smtp.example.com\");\n\n\t// create some properties and get the default Session\n\tSession session = Session.getDefaultInstance(props, null);\n\tsession.setDebug(debug);\n\n\t// create a message\n\tMessage msg = new MimeMessage(session);\n\n\t// set the from and to address\n\tInternetAddress addressFrom = new InternetAddress(from);\n\tmsg.setFrom(addressFrom);\n\n\tInternetAddress[] addressTo = new InternetAddress[recipients.length];\n\tfor (int i = 0; i < recipients.length; i++)\n\t{\n\t\taddressTo[i] = new InternetAddress(recipients[i]);\n\t}\n\tmsg.setRecipients(Message.RecipientType.TO, addressTo);\n\n\n\t// Optional : You can also set your custom headers in the Email if you Want\n\tmsg.addHeader(\"MyHeaderName\", \"myHeaderValue\");\n\n\t// Setting the Subject and Content Type\n\tmsg.setSubject(subject);\n\tmsg.setContent(message, \"text/plain\");\n\tTransport.send(msg);\n}",
    "difficulty": 4.0
  },
  {
    "text": "public static <T> T[] shuffle(T[] input) {\n\tT[] arr = Arrays.copyOf(input, input.length);\n\tint length = arr.length;\n\tint m = length;\n\twhile (m > 0) {\n\t\tint i = (int) Math.floor(Math.random() * m--);\n\t\tT tmp = arr[i];\n\t\tarr[i] = arr[m];\n\t\tarr[m] = tmp;\n\t}\n\treturn arr;\n}",
    "difficulty": 2.0
  },
  {
    "text": "public static int recursiveFactorial(int number) {\n\tvar initial = 0;\n\tif (number == initial) {\n\treturn initial + 1;\n\t}\n\treturn number * recursiveFactorial(number - 1);\n}",
    "difficulty": 1.0
  },
  {
    "text": "public List<Node> breadthFirstSearch(String rootName) {\n\tList<Node> result = new ArrayList<Node>();\n\tList<Node> temp = new ArrayList<Node>();\n\tSet<String> visited = new HashSet<String>();\n\n\tNode root = nodes.get(rootName);\n\ttemp.add(root);\n\tvisited.add(rootName);\n\n\twhile (temp.size() > 0) {\n\tNode currentNode = temp.get(0);\n\tList<Node> neighbors = currentNode.getNeighbors();\n\n\tfor (int i = 0; i < neighbors.size(); i++) {\n\t\tNode neighbor = neighbors.get(i);\n\n\t// a node can only be visited once if it has more than one parents \n\t\tif (visited.contains(neighbor.getName())) {\n\t\tcontinue;\n\t\t} else {\n\t\ttemp.add(neighbor);\n\t\tvisited.add(neighbor.getName());\n\t\t}\n\t}\n\n\ttemp.remove(0);\n\tresult.add(currentNode);\n\t}\n\n\treturn result;\n}",
    "difficulty": 6.0
  },
  {
    "text": "public class Add{\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint first = 10;\n\t\tint second = 20;\n\n\t\tint sum = first + second;\n\n\t\tSystem.out.println(\"The sum is: \" + sum);\n\t}\n}",
    "difficulty": 1.0
  },
  {
    "text": "public class ListNode {\n*\tint val;\n*\tListNode next;\n*\tListNode(int x) {\n*\t\tval = x;\n *\t\tnext = null;\n*\t}\n*}\n*/\npublic class Solution {\n\tpublic ListNode removeNthFromEnd(ListNode head, int n) {\n\t\tListNode cur = head, prev = head;\n\t\twhile(n-- > 0) {\n\t\t\tcur = cur.next;\n\t\t}\n\t\tif (cur == null)\n\t\t\treturn head.next;\n\t\twhile (cur.next != null) {\n\t\t\tcur = cur.next;\n\t\t\tprev = prev.next;\n\t\t}\n\t\tprev.next = prev.next.next;\n\t\treturn head;\n\t}\n}",
    "difficulty": 3.0
  },
  {
    "text": "package complexconditionals;\n\nimport java.util.*;\n\npublic class ComplexConditionals {\n\tpublic static void main(String[] args) {\n\t\tScanner reader = new Scanner(System.in);\n\t\tString input = reader.next();\n\t\tString sOne = \"abc\";\n\t\tString sTwo = \"z\";\n\t\t\n\t\tboolean bool1 = input.contains(sOne);\n\t\tboolean bool2 = input.contains(sTwo);\n\t\t\n\t\tif((bool1 || bool2) && false)\n\t\t{\n\t\t\tSystem.out.println(\"TRUE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(\"FALSE\");\n\t\t}\n\t}\n}",
    "difficulty": 2.0
  },
  {
    "text": "public class WritingXML {\n\tpublic static void main(String[] args) {\n\t\tFile xmlFile = new File(\"cars.xml\");\n\t\tDocument dom = LoadXMLDocument(xmlFile);\n\t\t\n\t\tNodeList owners = dom.getElementsByTagName(\"owner\");\n\t\tfor(int i = 0; i < owners.getLength(); i++)\n\t\t{\n\t\t\tElement owner = (Element)owners.item(i);\n\t\t\towner.setAttribute(\"name\", \"Mike\");\n\t\t}\n\t\t\n\t\tWriteXMLDocument(dom, xmlFile);\n\t}\n\t\n\tprivate static void WriteXMLDocument(Document doc, File destination)\n\t{\n\t\ttry{\n\t\t\t// Write doc to destination file here...\n\t\t\tTransformerFactory tf = TransformerFactory.newInstance();\n\t\t\tTransformer transformer = tf.newTransformer();\n\t\t\tStreamResult result = new StreamResult(destination);\n\t\t\tDOMSource source = new DOMSource(doc);\n\t\t\t\n\t\t\ttransformer.transform(source, result);\n\t\t}\n\t\tcatch(TransformerConfigurationException e)\n\t\t{\n\t\t\tSystem.err.println(\"XML writing failed.\");\n\t\t}\n\t\tcatch(TransformerException e)\n\t\t{\n\t\t\tSystem.err.println(\"XML writing failed.\");\n\t\t}\n\t}\n\t\n\tprivate static Document LoadXMLDocument(File source)\n\t{\n\t\tDocument dom = null;\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\n\t\ttry {\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tdom = builder.parse(source);\n\t\t}\n\t\tcatch (ParserConfigurationException e) {\n\t\t\tSystem.err.println(\"XML loading failed.\");\n\t\t}\n\t\tcatch (SAXException e) {\n\t\t\tSystem.err.println(\"XML loading failed.\");\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tSystem.err.println(\"XML loading failed.\");\n\t\t}\n\t\t\n\t\treturn dom;\n\t}\n}",
    "difficulty": 7.0
  }
  ]
}