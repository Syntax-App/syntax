{
  "array": [
    {
      "text": "import java.util.Arrays;\n\npublic class BubbleSort {\n\n\tstatic void sort(int [] arrA){\n\t\tif(arrA==null || arrA.length==0)\n\t\t\treturn;\n\n\t\tSystem.out.println(\"Original Array: \" + Arrays.toString(arrA));\n\t\tint size = arrA.length;\n\t\tfor (int i = 0; i <size-1 ; i++) {\n\t\t\tfor (int j = 0; j <size-i-1 ; j++) {\n\t\t\t\tif(arrA[j]>arrA[j+1]){\n\t\t\t\t\tint temp = arrA[j];\n\t\t\t\t\tarrA[j] = arrA[j+1];\n\t\t\t\t\tarrA[j+1] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Sorted Array: \" +  Arrays.toString(arrA));\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint [] arrA = {5, 1, 9, 3, 2, 10};\n\t\tsort(arrA);\n\t}\n}",
      "difficulty": 5.0
    },
    {
      "text": "import com.lowagie.text.Document;\nimport com.lowagie.text.Paragraph;\nimport com.lowagie.text.pdf.PdfWriter;\n\npublic class GeneratePDF {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tOutputStream file = new FileOutputStream(new File(\"C:\\\\Test.pdf\"));\n\n\t\t\tDocument document = new Document();\n\t\t\tPdfWriter.getInstance(document, file);\n\t\t\tdocument.open();\n\t\t\tdocument.add(new Paragraph(\"Hello Kiran\"));\n\t\t\tdocument.add(new Paragraph(new Date().toString()));\n\n\t\t\tdocument.close();\n\t\t\tfile.close();\n\n\t\t} catch (Exception e) {\n\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}",
      "difficulty": 2.0
    },
    {
      "text": "public void postMail( String recipients[ ], String subject, String message , String from) throws MessagingException\n{\n\tboolean debug = false;\n\tProperties props = new Properties();\n\tprops.put(\"mail.smtp.host\", \"smtp.example.com\");\n\n\tSession session = Session.getDefaultInstance(props, null);\n\tsession.setDebug(debug);\n\n\tMessage msg = new MimeMessage(session);\n\tInternetAddress addressFrom = new InternetAddress(from);\n\tmsg.setFrom(addressFrom);\n\n\tInternetAddress[] addressTo = new InternetAddress[recipients.length];\n\tfor (int i = 0; i < recipients.length; i++)\n\t{\n\t\taddressTo[i] = new InternetAddress(recipients[i]);\n\t}\n\tmsg.setRecipients(Message.RecipientType.TO, addressTo);\n\tmsg.addHeader(\"MyHeaderName\", \"myHeaderValue\");\n\tmsg.setSubject(subject);\n\tmsg.setContent(message, \"text/plain\");\n\tTransport.send(msg);\n}",
      "difficulty": 4.0
    },
    {
      "text": "public static <T> T[] shuffle(T[] input) {\n\tT[] arr = Arrays.copyOf(input, input.length);\n\tint length = arr.length;\n\tint m = length;\n\twhile (m > 0) {\n\t\tint i = (int) Math.floor(Math.random() * m--);\n\t\tT tmp = arr[i];\n\t\tarr[i] = arr[m];\n\t\tarr[m] = tmp;\n\t}\n\treturn arr;\n}",
      "difficulty": 2.0
    },
    {
      "text": "public static int recursiveFactorial(int number) {\n\tvar initial = 0;\n\tif (number == initial) {\n\treturn initial + 1;\n\t}\n\treturn number * recursiveFactorial(number - 1);\n}",
      "difficulty": 2.0
    },
    {
      "text": "public List<Node> breadthFirstSearch(String rootName) {\n\tList<Node> result = new ArrayList<Node>();\n\tList<Node> temp = new ArrayList<Node>();\n\tSet<String> visited = new HashSet<String>();\n\n\tNode root = nodes.get(rootName);\n\ttemp.add(root);\n\tvisited.add(rootName);\n\n\twhile (temp.size() > 0) {\n\tNode currentNode = temp.get(0);\n\tList<Node> neighbors = currentNode.getNeighbors();\n\n\tfor (int i = 0; i < neighbors.size(); i++) {\n\t\tNode neighbor = neighbors.get(i);\n\n\t\tif (visited.contains(neighbor.getName())) {\n\t\tcontinue;\n\t\t} else {\n\t\ttemp.add(neighbor);\n\t\tvisited.add(neighbor.getName());\n\t\t}\n\t}\n\n\ttemp.remove(0);\n\tresult.add(currentNode);\n\t}\n\n\treturn result;\n}",
      "difficulty": 6.0
    },
    {
      "text": "public class Add{\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint first = 10;\n\t\tint second = 20;\n\n\t\tint sum = first + second;\n\n\t\tSystem.out.println(\"The sum is: \" + sum);\n\t}\n}",
      "difficulty": 1.0
    },
    {
      "text": "public class Solution {\n\tpublic ListNode removeNthFromEnd(ListNode head, int n) {\n\t\tListNode cur = head, prev = head;\n\t\twhile(n-- > 0) {\n\t\t\tcur = cur.next;\n\t\t}\n\t\tif (cur == null)\n\t\t\treturn head.next;\n\t\twhile (cur.next != null) {\n\t\t\tcur = cur.next;\n\t\t\tprev = prev.next;\n\t\t}\n\t\tprev.next = prev.next.next;\n\t\treturn head;\n\t}\n}",
      "difficulty": 3.0
    },
    {
      "text": "package complexconditionals;\n\nimport java.util.*;\n\npublic class ComplexConditionals {\n\tpublic static void main(String[] args) {\n\t\tScanner reader = new Scanner(System.in);\n\t\tString input = reader.next();\n\t\tString sOne = \"abc\";\n\t\tString sTwo = \"z\";\n\t\t\n\t\tboolean bool1 = input.contains(sOne);\n\t\tboolean bool2 = input.contains(sTwo);\n\t\t\n\t\tif((bool1 || bool2) && false)\n\t\t{\n\t\t\tSystem.out.println(\"TRUE\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(\"FALSE\");\n\t\t}\n\t}\n}",
      "difficulty": 2.0
    },
    {
      "text": "public class WritingXML {\n\tpublic static void main(String[] args) {\n\t\tFile xmlFile = new File(\"cars.xml\");\n\t\tDocument dom = LoadXMLDocument(xmlFile);\n\t\t\n\t\tNodeList owners = dom.getElementsByTagName(\"owner\");\n\t\tfor(int i = 0; i < owners.getLength(); i++)\n\t\t{\n\t\t\tElement owner = (Element)owners.item(i);\n\t\t\towner.setAttribute(\"name\", \"Mike\");\n\t\t}\n\t\t\n\t\tWriteXMLDocument(dom, xmlFile);\n\t}\n\t\n\tprivate static void WriteXMLDocument(Document doc, File destination)\n\t{\n\t\ttry{\n\t\t\tTransformerFactory tf = TransformerFactory.newInstance();\n\t\t\tTransformer transformer = tf.newTransformer();\n\t\t\tStreamResult result = new StreamResult(destination);\n\t\t\tDOMSource source = new DOMSource(doc);\n\t\t\t\n\t\t\ttransformer.transform(source, result);\n\t\t}\n\t\tcatch(TransformerConfigurationException e)\n\t\t{\n\t\t\tSystem.err.println(\"XML writing failed.\");\n\t\t}\n\t\tcatch(TransformerException e)\n\t\t{\n\t\t\tSystem.err.println(\"XML writing failed.\");\n\t\t}\n\t}\n\t\n\tprivate static Document LoadXMLDocument(File source)\n\t{\n\t\tDocument dom = null;\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\n\t\ttry {\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tdom = builder.parse(source);\n\t\t}\n\t\tcatch (ParserConfigurationException e) {\n\t\t\tSystem.err.println(\"XML loading failed.\");\n\t\t}\n\t\tcatch (SAXException e) {\n\t\t\tSystem.err.println(\"XML loading failed.\");\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tSystem.err.println(\"XML loading failed.\");\n\t\t}\n\t\t\n\t\treturn dom;\n\t}\n}",
      "difficulty": 7.0
    },
    {
      "text": "@Override\n\tpublic void execute(final MinecraftServer server, final ICommandSender sender,\n\t\t\tfinal String[] args) throws CommandException {\n\t\tif (!(sender instanceof EntityPlayer)) {\n\t\t\tthrow new CommandException(\"Only players can use this command\");\n\t\t}\n\n\t\tfinal EntityPlayer player = (EntityPlayer) sender;\n\t\tfinal ItemStack stack = player.getHeldItem(EnumHand.MAIN_HAND);\n\n\t\tif (stack == null) {\n\t\t\tthrow new CommandException(\"You have no item in your main hand\");\n\t\t} else if (!(stack.getItem() instanceof ItemBlock)) {\n\t\t\tthrow new CommandException(\"The item in your main hand isn't a block\");\n\t\t} else if (args.length < 1) {\n\t\t\tthrow new CommandException(this.getUsage(sender));\n\t\t}\n\n\t\tfinal String file = args[0];\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tfinal IBlockState state = Block.getBlockFromItem(stack.getItem())\n\t\t\t\t.getStateFromMeta(stack.getItemDamage());\n\t\t\n\t\tfinal String rawData = getChatComponentFromNthArg(sender, args, 1).getUnformattedText();\n\t\tfinal JsonParser p = new JsonParser();\n\t\tfinal JsonElement parsed;\n\t\tif(rawData != null && rawData.length() > 0) {\n\t\t\tparsed = mergeDefaults(p.parse(rawData), state);\n\t\t} else {\n\t\t\tparsed = mergeDefaults(p.parse(\"{}\"), state);\n\t\t}\n\t\tOreSpawnReader.loadFromJson(FilenameUtils.getBaseName(file), parsed);\n\t\tOreSpawnWriter.saveSingle(FilenameUtils.getBaseName(file));\n\t}",
      "difficulty": 8.0
    },
    {
      "text": "public class ColorUtil {\n\n\tprivate ColorUtil() {\n\t\tthrow new AssertionError(\"Constructor is not allowed\");\n\t}\n\n\tpublic static Color hex2Color(String colorHex) {\n\t\treturn Optional.ofNullable(colorHex)\n\t\t\t\t.map(hex -> new Color(\n\t\t\t\t\t\tInteger.valueOf(colorHex.substring(0, 2), 16),\n\t\t\t\t\t\tInteger.valueOf(colorHex.substring(2, 4), 16),\n\t\t\t\t\t\tInteger.valueOf(colorHex.substring(4, 6), 16)))\n\t\t\t\t.orElse(null);\n\t}\n}",
      "difficulty": 2.0
    },
    {
      "text": "public static void updateCartItems(HttpServletRequest req) {\n\t\tString selectedBookId = req.getParameter(\"selectedBookId\");\n\t\tHttpSession session = req.getSession();\n\t\tif (selectedBookId != null) { // add item to the cart\n\n\t\t\t// Items will contain comma separated bookIds that needs to be added in the cart\n\t\t\tString items = (String) session.getAttribute(\"items\");\n\t\t\tif (req.getParameter(\"addToCart\") != null) { // add to cart\n\t\t\t\tif (items == null || items.length() == 0)\n\t\t\t\t\titems = selectedBookId;\n\t\t\t\telse if (!items.contains(selectedBookId))\n                    items = items + \",\" + selectedBookId; // if items already contains bookId, don't add it\n\n                // set the items in the session to be used later\n                session.setAttribute(\"items\", items);\n\n                /*\n                 * Quantity of each item in the cart will be stored in the session as:\n                 * Prefixed with qty_ following its bookId\n                 * For example 2 no. of book with id 'myBook' in the cart will be\n                 * added to the session as qty_myBook=2\n                 */\n                int itemQty = 0;\n                if (session.getAttribute(\"qty_\" + selectedBookId) != null)\n                    itemQty = (int) session.getAttribute(\"qty_\" + selectedBookId);\n                itemQty += 1;\n                session.setAttribute(\"qty_\" + selectedBookId, itemQty);\n            } else { // remove from the cart\n                int itemQty = 0;\n                if (session.getAttribute(\"qty_\" + selectedBookId) != null)\n                    itemQty = (int) session.getAttribute(\"qty_\" + selectedBookId);\n                if (itemQty > 1) {\n                    itemQty--;\n                    session.setAttribute(\"qty_\" + selectedBookId, itemQty);\n                } else {\n                    session.removeAttribute(\"qty_\" + selectedBookId);\n                    items = items.replace(selectedBookId + \",\", \"\");\n                    items = items.replace(\",\" + selectedBookId, \"\");\n                    items = items.replace(selectedBookId, \"\");\n                    session.setAttribute(\"items\", items);\n                }\n            }\n        }\n\n    }",
      "difficulty": 7.0
    },
    {
      "text": "private void createThumbnail(String filename, int thumbWidth, int thumbHeight, int quality, String outFilename)\n        throws InterruptedException, FileNotFoundException, IOException\n    {\n        // load image from filename\n        Image image = Toolkit.getDefaultToolkit().getImage(filename);\n        MediaTracker mediaTracker = new MediaTracker(new Container());\n        mediaTracker.addImage(image, 0);\n        mediaTracker.waitForID(0);\n        // use this to test for errors at this point: System.out.println(mediaTracker.isErrorAny());\n         \n        // determine thumbnail size from WIDTH and HEIGHT\n        double thumbRatio = (double)thumbWidth / (double)thumbHeight;\n        int imageWidth = image.getWidth(null);\n        int imageHeight = image.getHeight(null);\n        double imageRatio = (double)imageWidth / (double)imageHeight;\n        if (thumbRatio < imageRatio) {\n            thumbHeight = (int)(thumbWidth / imageRatio);\n        } else {\n            thumbWidth = (int)(thumbHeight * imageRatio);\n        }\n         \n        // draw original image to thumbnail image object and\n        // scale it to the new size on-the-fly\n        BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);\n        Graphics2D graphics2D = thumbImage.createGraphics();\n        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n        graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);\n         \n        // save thumbnail image to outFilename\n        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outFilename));\n        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);\n        JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(thumbImage);\n        quality = Math.max(0, Math.min(quality, 100));\n        param.setQuality((float)quality / 100.0f, false);\n        encoder.setJPEGEncodeParam(param);\n        encoder.encode(thumbImage);\n        out.close();\n    }",
      "difficulty": 6.0
    },
    {
      "text": "public void captureScreen(String fileName) throws Exception {\n \n   Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n   Rectangle screenRectangle = new Rectangle(screenSize);\n   Robot robot = new Robot();\n   BufferedImage image = robot.createScreenCapture(screenRectangle);\n   ImageIO.write(image, \"png\", new File(fileName));\n \n}",
      "difficulty": 3.0
    },
    {
      "text": "public class ZipIt {\n\tpublic static void main(String args[]) throws IOException {\n\t\tif (args.length < 2) {\n\t\t\tSystem.err.println(\"usage: java ZipIt Zip.zip file1 file2 file3\");\n\t\t\tSystem.exit(-1);\n\t\t}\n\t\tFile zipFile = new File(args[0]);\n\t\tif (zipFile.exists()) {\n\t\t\tSystem.err.println(\"Zip file already exists, please try another\");\n\t\t\tSystem.exit(-2);\n\t\t}\n\t\tFileOutputStream fos = new FileOutputStream(zipFile);\n\t\tZipOutputStream zos = new ZipOutputStream(fos);\n\t\tint bytesRead;\n\t\tbyte[] buffer = new byte[1024];\n\t\tCRC32 crc = new CRC32();\n\t\tfor (int i=1, n=args.length; i < n; i++) {\n\t\t\tString name = args[i];\n\t\t\tFile file = new File(name);\n\t\t\tif (!file.exists()) {\n\t\t\t\tSystem.err.println(\"Skipping: \" + name);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tBufferedInputStream bis = new BufferedInputStream(\n                new FileInputStream(file));\n            crc.reset();\n            while ((bytesRead = bis.read(buffer)) != -1) {\n                crc.update(buffer, 0, bytesRead);\n            }\n            bis.close();\n            // Reset to beginning of input stream\n            bis = new BufferedInputStream(\n                new FileInputStream(file));\n            ZipEntry entry = new ZipEntry(name);\n            entry.setMethod(ZipEntry.STORED);\n            entry.setCompressedSize(file.length());\n            entry.setSize(file.length());\n            entry.setCrc(crc.getValue());\n            zos.putNextEntry(entry);\n            while ((bytesRead = bis.read(buffer)) != -1) {\n                zos.write(buffer, 0, bytesRead);\n            }\n            bis.close();\n        }\n        zos.close();\n    }\n}",
      "difficulty": 8.0
    },
    {
      "text": "public static long getYearsDifference(LocalDate firstTime, LocalDate secondTime) {\n  var yearsDifference = ChronoUnit.YEARS.between(firstTime, secondTime);\n  return Math.abs(yearsDifference);\n}\npublic static long getMonthsDifference(LocalDate firstTime, LocalDate secondTime) {\n  var monthsDifference = ChronoUnit.MONTHS.between(firstTime, secondTime);\n  return Math.abs(monthsDifference);\n}\npublic static long getDaysDifference(LocalDate firstTime, LocalDate secondTime) {\n  var daysDifference = ChronoUnit.DAYS.between(firstTime, secondTime);\n  return Math.abs(daysDifference);\n}",
      "difficulty": 2.0
    },
    {
      "text": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        //create result list to store i,j,k\n        List<List<Integer>> result = new LinkedList<List<Integer>>();\n        \n        //sorting nums\n        Arrays.sort(nums);\n        \n        for (int i = 0; i < nums.length - 2; i++) {\n\n            int left = i + 1;\n            int right = nums.length - 1;\n\n            if (i > 0 && nums[i] == nums[i-1]) {\n                continue; //if nums have same numbers, just check one time.\n            } \n            \n            while (left < right) {\n                int sum = nums[left] + nums[right] + nums[i];\n                \n                if (sum == 0) {\n                    //if sum == 0, store i,j,k\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    left++; //check anoter case\n                    right--;\n                    //if next number == now number\n                    while (nums[left] == nums[left - 1] && left < right) {\n                        left++;\n                    }\n                    while (nums[right] == nums[right + 1] && left < right) {\n                        right--;\n                    } \n                } else if (sum > 0) {\n                    //if sum > 0, right--;\n                    right--;\n                } else {\n                    //if sum < 0, left++;\n                    left++;\n                }\n            }\n        }\n        \n        return result; //return result list\n    }\n}",
      "difficulty": 5.0
    },
    {
      "text": "public ListNode reverseList(ListNode head) {\n        // Iterative solution\n        ListNode newHead = null;\n        while (head != null) {\n            ListNode next = head.next;\n            head.next = newHead;\n            newHead = head;\n            head = next;\n        }\n        return newHead;\n    }",
      "difficulty": 3.0
    }
  ]
}