public class WeatherProxyCache<T> {

    private final LoadingCache<List<Double>, WeatherResponse> cache;

    private final double radius;

    private WeatherResponse weatherResponse;

    public WeatherProxyCache(int size, int time, TimeUnit unit, double radius) {
      this.cache = CacheBuilder.newBuilder()
          .maximumSize(size)
          .expireAfterAccess(time, unit)
          .build(
              new CacheLoader<>() {
                @NotNull
                @Override
                public WeatherResponse load(@NotNull List<Double> list) throws Exception {
                    String gridUrl = "https://api.weather.gov/points/" + list.get(0) + "," + list.get(1);
                    Requestor<T> gridRequestor = new Requestor<>(gridUrl);
                    GridResponse gridResponse = (GridResponse) gridRequestor.getResponse(GridResponse.class);

                    String weatherUrl = gridResponse.properties().endpoint();

                    Requestor<T> weatherRequestor = new Requestor<>(weatherUrl);
                    return (WeatherResponse) weatherRequestor.getResponse(WeatherResponse.class);
                }
              });
      this.radius = radius;
    }

    public Forecast getForecast(double lat, double lon) {
        for (List<Double> coord: this.cache.asMap().keySet()) {
            double distance = Math.sqrt(Math.pow(Math.abs(lat - coord.get(0)), 2) +
                                Math.pow(Math.abs(lon - coord.get(1)), 2));
            if (distance <= this.radius) {
                this.weatherResponse = this.cache.getUnchecked(coord);
                return this.cache.getUnchecked(coord).properties().periods().get(0);
            }
        }
        List<Double> resultList = new ArrayList<>();
        resultList.add(lat);
        resultList.add(lon);
        this.weatherResponse = this.cache.getUnchecked(resultList);
        return this.cache.getUnchecked(resultList).properties().periods().get(0);
    }

    public int getSize() {
        return this.cache.asMap().size();
    }

    public List<WeatherResponse> getContents() throws ExecutionException {
        List<WeatherResponse> contents = new ArrayList<>();
        for (List<Double> key: this.cache.asMap().keySet()) {
            contents.add(this.cache.get(key));
        }
        return contents;
    }

    public WeatherResponse getWeatherResponse() {
        return this.weatherResponse;
    }
}